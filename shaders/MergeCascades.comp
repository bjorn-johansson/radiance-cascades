
#version 430 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in; //an interesting idea is to do warp group z coord = cascade level.

layout(binding = 2) uniform sampler2DArray _cascadeSamplers; //read
layout(binding = 2, rgba16f) uniform writeonly image2DArray _cascadeImages; //write

uniform int _sourceLayerIndex;
uniform int _Merge;

const int CASCADE_TEXTURE_SIDE = 1024;
const int CASCADE_SCALING = 4;

const int CASCADE_PROBE_SIDES[7] = { 2, 4, 8, 16, 32, 64, 128};

//the 4 possible weights when doing bilinear merging in a grid
const vec4 weights[2][2] = vec4[2][2](
    vec4[2](vec4(0.5625, 0.1875, 0.1875, 0.0625), vec4(0.1875, 0.5625, 0.0625, 0.1875)),
    vec4[2](vec4(0.1875, 0.0625, 0.5625, 0.1875), vec4(0.0625, 0.1875, 0.1875, 0.5625))
);

int CoordToIndex(ivec2 coord, int width){
    return coord.y * width + coord.x;
}

ivec2 ProbeIndexToCoord(int index, int width, ivec2 probeID) {
    ivec2 coord = ivec2(index % width, index / width);
    return probeID * width + coord;
}

vec3 SampleProbe(ivec2 probeID, int DirBlockIndex) {

    ivec2 gridExtent = ivec2(CASCADE_TEXTURE_SIDE / float(CASCADE_PROBE_SIDES[_sourceLayerIndex]));
    if (any(lessThanEqual(probeID, ivec2(-1))) || any(greaterThanEqual(probeID, gridExtent))) {
        return vec3(0,0,0);
    }

    int width = CASCADE_PROBE_SIDES[_sourceLayerIndex];
    ivec2 baseCoord = ProbeIndexToCoord(DirBlockIndex, width, probeID);
    
    vec3 radiance = vec3(0.0);
    for (int i = 0; i < CASCADE_SCALING; i++) {
        ivec2 fetchCoord = baseCoord + ivec2(i, 0); //groups of 4 indicies will always share y value.
        vec4 col = texelFetch(_cascadeSamplers, ivec3(fetchCoord, _sourceLayerIndex), 0);
        radiance += col.rgb;
    }
    radiance *= 0.25f;

    return radiance;
}

void main() {
    const int TARGET_PROBE_SIDE = CASCADE_PROBE_SIDES[_sourceLayerIndex - 1];
    const int SOURCE_PROBE_SIDE = CASCADE_PROBE_SIDES[_sourceLayerIndex];
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    
    vec4 targetCol = texelFetch(_cascadeSamplers, ivec3(id, _sourceLayerIndex - 1), 0);
    if(targetCol.a > 0){
        imageStore(_cascadeImages, ivec3(id, _sourceLayerIndex - 1 ), vec4(targetCol));
        return;
    }
    
    vec2 sourceProbeCoord = id / float(SOURCE_PROBE_SIDE);     //which source probe the target probe belongs to
    ivec2 baseID = ivec2(floor(sourceProbeCoord));
    
    //shift the source probe coords to be the 4 source probes which centers are the closest to the center of the target probe.
    //imagine a source probe that contains a 2x2 block of target probes. we select our 4 probes in the direction of the target probe from the sources center.
    ivec2 offset = ivec2(1,1) - ivec2(floor((sourceProbeCoord - baseID) * 2)); //TL:1,1   BR:0,0
    baseID.x -= offset.x;
    baseID.y -= offset.y;
    
    vec4 weight = weights[offset.y][offset.x];
    
   
    ivec2 targetTexelInProbe = id % TARGET_PROBE_SIDE;                                              //texel coord in the probe were writing to
    int tgtDirIndex = CoordToIndex(targetTexelInProbe, CASCADE_PROBE_SIDES[_sourceLayerIndex - 1]); //convert to directional index inside the probe that we are writing to
    int srcIndexBlock = tgtDirIndex * CASCADE_SCALING;                                              //scale that up to get the 4 source indicies going in the directions that are closest to our target ray.
    
    vec3 P00 = SampleProbe(baseID, srcIndexBlock);
    vec3 P10 = SampleProbe(baseID + ivec2(1, 0), srcIndexBlock);
    vec3 P01 = SampleProbe(baseID + ivec2(0, 1), srcIndexBlock);
    vec3 P11 = SampleProbe(baseID + ivec2(1, 1), srcIndexBlock);
    
    vec3 result = 
    P00 * weight.x +
    P10 * weight.y + 
    P01 * weight.z + 
    P11 * weight.w;
    
    result += targetCol.rgb;

    if (_Merge == 1)
        imageStore(_cascadeImages, ivec3(id, _sourceLayerIndex - 1), vec4(result, targetCol.a));
    else {
       result = texelFetch(_cascadeSamplers, ivec3(id, _sourceLayerIndex), 0).rgb; 
       result += targetCol.rgb;
       imageStore(_cascadeImages, ivec3(id, _sourceLayerIndex-1), vec4(result, targetCol.a));
    }
}
